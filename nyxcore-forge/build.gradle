applyPlugin('net.minecraftforge.gradle')
applyPlugin('net.kyori.blossom')

version = "$minecraft_version-$project_major.$project_minor-Forge-$project_suffix" as Object

blossom {
    replaceToken("@version@", "$project_major.$project_minor")
    replaceToken("@description@", "project_description")
    replaceToken("@id@", "$project_id")
    replaceToken("@name@", "$project_name")
    replaceToken("@organization@", "$project_organization")
    replaceToken("@authors@", "$project_authors")
    replaceToken("@url@", "$project_url")
}

java {
    archivesBaseName = 'NyxCore'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: "$mappings_channel", version: "$mappings_version"

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                testforgestable {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'


            mods {
                testforgestable {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:$forgeVersion"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

4   //implementation("javax.validation:validation-api:$validation")
    implementation group: 'com.flowpowered', name: 'flow-math', version: '1.0.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    implementation project(':nyxcore-common')
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "$project_id",
                "Specification-Vendor"    : "$project_authors",
                "Specification-Version"   : "$project_major.$project_minor", // We are version 1 of ourselves
                "Implementation-Title"    : rootProject.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "$project_authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    from(project(':nyxcore-common').sourceSets.main.output) {
        include 'io/github/poqdavid/nyx/nyxcore/**'
    }
}

void applyPlugin(String PluginId) {
    if (project.getPlugins().hasPlugin(PluginId)) {
        project.logger.log(LogLevel.WARN, "Plugin ${PluginId} already applied")
    } else {
        apply plugin: PluginId
    }
}

task copyJar(type: Copy) {
    from jar.archiveFile
    into 'C:/Minecraft/Servers/Forge/mods'
    project.logger.log(LogLevel.WARN, "Copied file: ${jar.archiveFile}")
}


jar.finalizedBy('reobfJar')

build.finalizedBy('copyJar')