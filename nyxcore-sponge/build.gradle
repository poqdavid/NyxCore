plugins {
    id "signing"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Gradle-Plugins"
        url = "https://plugins.gradle.org/m2"
    }
    maven {
        name = "Sponge"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "Forge"
        url = "https://files.minecraftforge.net/maven"
    }
    maven {
        name = "Nucleus"
        url = "https://repo.drnaylor.co.uk/artifactory/list/minecraft"
    }
    maven {
        name = "QuickStart"
        url = "https://repo.drnaylor.co.uk/artifactory/list/quickstart"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public"
    }
}

applyPlugin('net.minecraftforge.gradle')
applyPlugin('org.cadixdev.licenser')
applyPlugin('org.spongepowered.mixin')
applyPlugin('org.spongepowered.gradle.plugin')

applyPlugin('net.kyori.blossom')

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

version = "$minecraft_version-$nyxcore_project_major.$nyxcore_project_minor-$nyxcore_project_api-$nyxcore_project_suffix" as Object

blossom {
    replaceToken("@version@", "$nyxcore_project_major.$nyxcore_project_minor")
    replaceToken("@description@", "$nyxcore_project_description")
    replaceToken("@id@", "$nyxcore_project_id")
    replaceToken("@name@", "$nyxcore_project_name")
    replaceToken("@organization@", "$nyxcore_project_organization")
    replaceToken("@authors@", "$nyxcore_project_authors")
    replaceToken("@url@", "$nyxcore_project_url")
}

if (System.getenv().BUILD_NUMBER != null) {
    version += "+${System.getenv().BUILD_NUMBER}"
}


mixin {
    defaultObfuscationEnv "notch"
}

sourceSets {
    main {
        ext.refMap = "mixins.${rootProject.name.toLowerCase()}.refmap.json"
    }
}

mixin {
    add sourceSets.main, "mixins.${rootProject.name.toLowerCase()}.refmap.json"
}

configurations {
    provided
    compile.extendsFrom provided
    compileJava.options.encoding = "UTF-8"
    jar.archiveName = "${rootProject.name}-${project.version}.jar"
}

jar {
    manifest {
        attributes 'Main-Class': 'io.github.poqdavid.nyx.nyxcore.NyxCore'
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
    //options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    options.compilerArgs += [
            '-Xlint:-processing',
            '-Xlint:-deprecation',
    ]
    options.deprecation = true
}

dependencies {
    implementation group: 'org.bstats', name: 'bstats-sponge', version: "$bstats"
    shadow group: 'org.bstats', name: 'bstats-sponge', version: "$bstats"

    minecraft "net.minecraftforge:forge:$forgeVersion"

    implementation("org.spongepowered:spongeapi:$spongeapi")
    annotationProcessor("org.spongepowered:spongeapi:$spongeapi")

    implementation "org.spongepowered:mixin:$spongemixin"
    compile "org.spongepowered:mixin:$spongemixin:processor"

    annotationProcessor("org.spongepowered:mixin:$spongemixin:processor")

    implementation("javax.validation:validation-api:$validation")
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'

    implementation project(':nyxcore-common')
}

signing {
    required { hasProperty("signing.keyId") }
    sign configurations.archives
    sign shadowJar
}

shadowJar {
    dependencies {
        include(dependency('org.bstats:bstats-sponge'))
        include(dependency('org.bstats:bstats-base'))
    }

    version = project.version
    configurations = [project.configurations.shadow]

    relocate "org.bstats", "io.github.poqdavid.nyx.${nyxcore_project_id}.shaded.bstats"

    archiveName("${rootProject.name}-${project.version}.jar")

    from(project(':nyxcore-common').sourceSets.main.output) {
        include 'io/github/poqdavid/nyx/nyxcore/**'
    }

    build {
        dependsOn tasks.named("shadowJar")
    }
}

minecraft {
    mappings channel: "$mappings_channel", version: "$mappings_version"
}

license {
    header = file('../HEADER.txt')
    newLine = true
    ext {
        name = "$nyxcore_project_name"
       organization = "$nyxcore_project_organization"
        url = "$nyxcore_project_url"
    }
    include '**/*.java'
    include '**/*.groovy'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", "$nyxcore_project_major.$nyxcore_project_minor"
    inputs.property "mcversion", "$minecraft_version"
    inputs.property "modid", "$nyxcore_project_id"
    inputs.property "description", "$nyxcore_project_description"
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand 'version': "$nyxcore_project_major.$nyxcore_project_minor", 'mcversion': "$minecraft_version"
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    from '../LICENSE.txt'
}

task copyJar(type: Copy) {
    def dir = new File('C:/Minecraft/Servers/Sponge/mods')
    if(dir.exists()) {
        from jar.archiveFile
        into "${dir}"
        project.logger.log(LogLevel.WARN, "Copied file: ${jar.archiveFile}")
    }else {
        project.logger.log(LogLevel.WARN, "Destination Dir: ${dir} Doesn't exists!!")
    }
}

artifacts {
    archives shadowJar
}

tasks.shadowJar.dependsOn('reobfJar')

jar.finalizedBy('reobfJar')

build.finalizedBy('copyJar')

void applyPlugin(String PluginId) {
    if (project.getPlugins().hasPlugin(PluginId)) {
        project.logger.log(LogLevel.WARN, "Plugin ${PluginId} already applied")
    } else {
        apply plugin: PluginId
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}